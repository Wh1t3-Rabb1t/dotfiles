#!/usr/bin/env zsh

################################################################################
# Track daily caffeine intake and monitor active levels.
# ------------------------------------------------------
# Arguments:
#     1) inc   - Increase pill count by one
#     2) dec   - Decrease pill count by one
#     3) total - Print total consumed pills / active mg of caffeine
#     4) reset - Reset pill count
# Globals:
#     $VI_STATE_DIR
################################################################################

emulate -L zsh

# Set strict file permissions
local original_permissions
original_permissions=$(umask)
umask 077
trap 'umask '$original_permissions'' EXIT

# Declare state files
local state_dir pill_counter start_timestamp dosage_log
state_dir="${VI_STATE_DIR}/caffeine"
pill_counter="${VI_STATE_DIR}/caffeine/pill_counter"
start_timestamp="${VI_STATE_DIR}/caffeine/start_timestamp"
dosage_log="${VI_STATE_DIR}/caffeine/dosage_log"

# Ensure required dirs / files exist
[[ ! -d "$state_dir" ]]       && mkdir "$state_dir"
[[ ! -f "$pill_counter" ]]    && builtin printf "%s" "0" > "$pill_counter"
[[ ! -f "$start_timestamp" ]] && builtin printf "%s" "$(date +%s)/$(date)" > "$start_timestamp"
[[ ! -f "$dosage_log" ]]      && : > "$dosage_log"

local function calculate_caffeine_levels() {
    local total_mg joined_timestamps start_time start_time_readable now_time elapsed_time
    pill_counter=$(< "$pill_counter" )
    total_mg=0
    joined_timestamps=$(< "$start_timestamp" )
    start_time=${joined_timestamps%%/*}
    start_time_readable=${joined_timestamps#*/}
    now_time=$(date +%s)
    elapsed_time=$(( now_time - start_time ))

    # Calculate total active mgs of caffeine
    local index
    for index in ${(f)"$(< $dosage_log )"}; do
        local dose_index dose_timestamp time_of_dose
        dose_index=${index%% *}
        dose_timestamp=${index#* }
        time_of_dose=$(( now_time - dose_timestamp ))
        (( time_of_dose < 14400 )) && total_mg=$(( total_mg + 100 ))
        unset dose_index dose_timestamp time_of_dose
    done

    local status_message text_hl subtext_hl no_color
    subtext_hl=$'\x1b[38;5;38m'
    no_color=$'\x1b[0m'

    # Determine approximate message and colors depending on caffeine levels
    if (( total_mg >= 600 )); then
        status_message="Liftoff!!!"
        text_hl=$'\x1b[38;5;9m'   # Red
    elif (( total_mg >= 400 )); then
        status_message="Hyperdrive engaged."
        text_hl=$'\x1b[38;5;11m'  # Yellow
    elif (( total_mg >= 200 )); then
        status_message="Boot loading dexterity modules."
        text_hl=$'\x1b[38;5;78m'  # Green
    else
        status_message="Critical systems initializing."
        text_hl=$'\x1b[38;5;69m'  # Blue
    fi

    local pills session_start mg
    pills="${text_hl}${pill_counter}${no_color}"
    session_start="${subtext_hl}${start_time_readable}${no_color}"
    mg="${text_hl}${total_mg}${no_color}"

    builtin printf "%s\n" "You have consumed ${pills} caffeine pill/s starting at ${session_start}."
    builtin printf "%s\n" "There is approximately ${mg}mg of caffeine active in your bloodstream."
    builtin printf "%s\n" "$status_message"
}

local daily_pills
daily_pills=$(< "$pill_counter" )

# Init session start time if no pills have been consumed
if (( daily_pills == 0 )); then
    : > "$dosage_log"
    builtin printf "%s" "$(date +%s)/$(date)" > "$start_timestamp"
fi

# Parse args
if [[ $1 == "inc" || $1 == "i" ]] || [[ $# == 0 ]]; then
    # Increment pill counter and update dosage log
    daily_pills=$(( daily_pills + 1 ))
    builtin printf "%s" "$daily_pills" > "$pill_counter"
    builtin printf "%s\n" "$daily_pills $(date +%s)" >> "$dosage_log"
    calculate_caffeine_levels
elif [[ $1 == "dec" ]]; then
    # Decrement pill counter and update dosage log
    if (( daily_pills > 0 )); then
        local temp_file
        temp_file=$(mktemp "${dosage_log}.XXXX")
        head --line=-1 -- "$dosage_log" > "$temp_file" && mv -- "$temp_file" "$dosage_log"
        daily_pills=$(( daily_pills - 1 ))
        builtin printf "%s" "$daily_pills" > "$pill_counter"
        calculate_caffeine_levels
    else
        builtin printf "%s\n" "Insufficient levels. Need more caffeine."
    fi
elif [[ $1 == "total" || $1 == "t" ]]; then
    # Print amount of caffeine consumed
    calculate_caffeine_levels
elif [[ $1 == "reset" ]]; then
    # Reset pill count
    builtin printf "%s" "0" > "$pill_counter"
    builtin printf "%s\n" "Reset caffeine pill count to 0."
else
    # Invalid argument
    builtin printf "%s\n\n" "Invalid argument."
    builtin printf "%s\n" "Pass:"
    builtin printf "%s\n" "    inc   - To increase pill count."
    builtin printf "%s\n" "    dec   - To decrease pill count."
    builtin printf "%s\n" "    total - To print the total caffeine consumed."
    builtin printf "%s\n" "    reset - To reset pill count."
fi
