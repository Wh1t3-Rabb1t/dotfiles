#!/usr/bin/env zsh

local state_dir pill_counter start_timestamp dosage_log
state_dir="${VI_STATE_DIR}/caffeine"
pill_counter="${VI_STATE_DIR}/caffeine/pill_counter"
start_timestamp="${VI_STATE_DIR}/caffeine/start_timestamp"
dosage_log="${VI_STATE_DIR}/caffeine/dosage_log"

# Ensure required dirs / files exist
[[ ! -d "$state_dir" ]]       && mkdir "$state_dir"
[[ ! -f "$pill_counter" ]]    && builtin printf "%s" "0" > "$pill_counter"
[[ ! -f "$start_timestamp" ]] && : > "$start_timestamp"
[[ ! -f "$dosage_log" ]]      && : > "$dosage_log"

local function calculate_caffeine_levels() {
    local total_mg start_time start_time_readable now_time elapsed_time joined_timestamps
    daily_pills=$(< "$pill_counter" )
    now_time=$(date +%s)
    elapsed_time=$(( now_time - start_time ))
    joined_timestamps=$(< "$start_timestamp" )
    start_time=${joined_timestamps%%/*}
    start_time_readable=${joined_timestamps#*/}
    total_mg=0

    # Calculate total active mgs of caffeine
    local index
    for index in ${(f)"$(< $dosage_log )"}; do
        local dose_index dose_timestamp time_of_dose
        dose_index=${index%% *}
        dose_timestamp=${index#* }
        time_of_dose=$(( now_time - dose_timestamp ))
        (( time_of_dose < 14400 )) && total_mg=$(( total_mg + 100 ))
        unset dose_index dose_timestamp time_of_dose
    done

    # Determine approximate highlight colors depending on caffeine levels
    local text_hl subtext_hl no_color warning_message
    subtext_hl=$'\x1b[38;5;38m'
    no_color=$'\x1b[0m'

    if (( total_mg >= 600 )); then
        warning_message="Entering the red zone, slow down there cpt."
        text_hl=$'\x1b[38;5;9m'   # Red
    elif (( total_mg >= 400 )); then
        warning_message="Hyperdrive engaged!"
        text_hl=$'\x1b[38;5;11m'  # Yellow
    elif (( total_mg >= 200 )); then
        warning_message="Getting warmed up."
        text_hl=$'\x1b[38;5;78m'  # Green
    else
        warning_message="Early days."
        text_hl=$'\x1b[38;5;69m'  # Blue
    fi

    builtin printf "\n%s\n" "You have consumed ${text_hl}${daily_pills}${no_color} caffeine pill/s today starting at ${subtext_hl}${start_time_readable}${no_color}."
    builtin printf "%s\n" "There is approximately ${text_hl}${total_mg}${no_color}mg of caffeine active in your bloodstream."
    builtin printf "%s\n" "$warning_message"
}

# Init session start time if no pills have been consumed
if (( "$(< $pill_counter )" == 0 )); then
    : > "$dosage_log"
    builtin printf "%s" "$(date +%s)/$(date)" > "$start_timestamp"
fi

# Increment pill counter and update dosage log
if [[ $1 == "inc" ]] || [[ $# == 0 ]]; then
    daily_pills=$(< "$pill_counter" )
    daily_pills=$(( daily_pills + 1 ))
    builtin printf "%s" "$daily_pills" > "$pill_counter"
    builtin printf "%s\n" "$daily_pills $(date +%s)" >> "$dosage_log"
    calculate_caffeine_levels

# Decrement pill counter and update dosage log
elif [[ $1 == "dec" ]]; then
    daily_pills=$(< "$pill_counter" )

    # Prevent pill count from dropping below 0
    if (( daily_pills > 0 )); then
        daily_pills=$(( daily_pills - 1 ))
        builtin printf "%s" "$daily_pills" > "$pill_counter"
        head --line=-1 -- "$dosage_log" > "$dosage_log.tmp" && mv -- "$dosage_log.tmp" "$dosage_log"
        calculate_caffeine_levels
    else
        builtin printf "%s\n" "Insufficient levels. Need more caffeine."
    fi

# Reset pill count
elif [[ $1 == "reset" ]]; then
    builtin printf "%s" "0" > "$pill_counter"
    builtin printf "\n%s\n" "Reset caffeine pill count to 0."
else
    builtin printf "%s\n" "Invalid argument. Pass 'reset' to reset pill count."
fi
