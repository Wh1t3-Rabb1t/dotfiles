#!/usr/bin/env zsh

################################################################################
# Interactive stopwatch.
#
# Arguments:
#   $@  start - Start the timer
#   $@  reset - Dump session data and start a new session
#   $@  log   - Print archived log data
#
# Globals:
#   $VI_STATE_DIR
################################################################################

emulate -L zsh

# Set strict file permissions
local original_permissions
original_permissions=$(umask)
umask 077
trap 'umask '"$original_permissions"'' EXIT

# Declare state files
local state_dir work_logs stopwatch_state current_timer
state_dir="${VI_STATE_DIR}/work-timer"
work_logs="${state_dir}/work-logs"
stopwatch_state="${state_dir}/stopwatch_state"
current_timer="${state_dir}/current_timer"

# Ensure required dirs / files exist
[[ ! -d "$state_dir" ]]       && mkdir "$state_dir"
[[ ! -d "$work_logs" ]]       && mkdir "$work_logs"
[[ ! -f "$stopwatch_state" ]] && : > "$stopwatch_state"
[[ ! -f "$current_timer" ]]   && : > "$current_timer"

local function init_work_session() {
    # Determine current time group for work logs (i.e. which year / month is it)
    local cur_year cur_month cur_month_numeric log_file
    cur_year=$(date +%Y)
    cur_month=$(date +%B)
    cur_month_numeric=$(date +%m)
    log_file="${work_logs}/${cur_year}"

    # Create new log file if one doesn't exist for the current year
    [[ ! -f "$log_file" ]] && builtin printf "${cur_month_numeric}_${cur_month} 0" > "$log_file"

    # Init elapsed work time
    builtin printf "0" > "$current_timer"
}

local function start_stopwatch() {
    # Turn stopwatch on if re-launching after quitting
    [[ ! -s "$stopwatch_state" ]] && builtin printf "on" > "$stopwatch_state"

    builtin printf "%s\n%s\n\n" \
        "Space : Toggle stopwatch on/off" \
        "q     : Stop stopwatch"

    local stopwatch key
    while true; do
        stopwatch=$(< "$stopwatch_state" )

        # Incrementally update timer while stopwatch state is set to 'on'
        if [[ $stopwatch == "on" ]]; then
            (( elapsed++ ))
            builtin printf "\rElapsed time: %02d:%02d:%02d " $((elapsed/3600)) $((elapsed/60%60)) $((elapsed%60))
        fi

        # Use read with timeout for responsive key polling
        if read -t 1 -k 1 key; then
            case "$key" in
                ' ')
                    [[ $stopwatch == "on" ]] \
                        && builtin printf "off" > "$stopwatch_state" \
                        || builtin printf "on" > "$stopwatch_state"
                    ;;
                q)
                    builtin printf "$elapsed" > "$current_timer"
                    builtin printf "\rStopped at: %02d:%02d:%02d " $((elapsed/3600)) $((elapsed/60%60)) $((elapsed%60))
                    : > "$stopwatch_state"
                    break
                    ;;
            esac
        fi
    done
}

# Dump current session data and create a new one
local function dump_session_data() {
    builtin printf -v session_time "%02d:%02d:%02d" $((elapsed/3600)) $((elapsed/60%60)) $((elapsed%60))

    builtin printf "%s\n%s\n\n%s\n" \
        "Dumping current session time." \
        "Elapsed: ${session_time}" \
        "A new session will initialize automatically when restarting the stopwatch."

    # Split the current log file contents into an array for processing
    local log_file
    typeset -a log_array
    log_file="${work_logs}/$(date +%Y)"
    log_array=( "${(f)$(< "$log_file" )}" )

    # Update time logs with the current stopwatch elapsed time
    local entry log_month
    log_month="$(date +%m)_$(date +%B)"
    for entry in "${log_array[@]}"; do
        if [[ $entry == "$log_month"* ]]; then
            local logged_time updated_time index
            logged_time=${entry#* }
            updated_time=$(( logged_time + elapsed ))
            index="${log_array[(Ie)$entry]}"
            log_array[$index]="${log_month} ${updated_time}"
            break
        fi
    done

    # Regenerate the relevant log file with updated values
    local temp_file
    temp_file=$(mktemp "${log_file}.XXXX")
    trap 'rm -f "$temp_file"' EXIT
    builtin printf "%s\n" "${log_array[@]}" > "$temp_file" && mv -- "$temp_file" "$log_file"

    # Reset current session timer
    : > "$current_timer"
}

# Print breakdowns of average hours worked per day, week, month
local function print_work_hours() {
    local main_group_hl subgroup_hl no_color
    main_group_hl=$'\x1b[38;5;11m'
    subgroup_hl=$'\x1b[38;5;38m'
    no_color=$'\x1b[0m'

    local file
    for file in "${work_logs}"/*(.); do
        typeset -a log_array
        log_array=( "${(f)$(< "$file" )}" )

        local year_total monthly_totals
        year_total=0

        local entry
        for entry in "${log_array[@]}"; do
            local month logged_time
            month=${entry%% *}
            logged_time=${entry#* }

            builtin printf -v total_time "%02d:%02d" $((logged_time/3600)) $((logged_time/60%60))
            builtin printf -v weekly_time "%02d:%02d" $(((logged_time/4)/3600)) $(((logged_time/4)/60%60))
            builtin printf -v daily_time "%02d:%02d" $(((logged_time/31)/3600)) $(((logged_time/31)/60%60))

            monthly_totals+="- ${subgroup_hl}${month#*_}${no_color}\nMonthly total:   ${total_time}\nWeekly average:  ${weekly_time}\nDaily average:   ${daily_time}\n\n"
            year_total=$(( year_total + logged_time ))
            unset month logged_time
        done
        unset entry

        # Print averages for each month in the current year
        builtin printf "\n%s\n\n" "_________ ${main_group_hl}${file:t}${no_color} _________"
        builtin printf "$monthly_totals"

        builtin printf -v yearly_total "%02d:%02d" $((year_total/3600)) $((year_total/60%60))
        builtin printf -v monthly_average "%02d:%02d" $(((year_total/12)/3600)) $(((year_total/12)/60%60))
        builtin printf -v weekly_average "%02d:%02d" $(((year_total/52)/3600)) $(((year_total/52)/60%60))
        builtin printf -v daily_average "%02d:%02d" $(((year_total/365)/3600)) $(((year_total/365)/60%60))

        # Print yearly totals
        builtin printf "%s\n%s\n%s\n%s\n%s\n" \
            "- ${subgroup_hl}TOTALS${no_color}" \
            "Yearly total:    ${yearly_total}" \
            "Monthly average: ${monthly_average}" \
            "Weekly average:  ${weekly_average}" \
            "Daily average:   ${daily_average}"

        unset log_array year_total monthly_totals
    done
}

# Help menu
local function print_help_menu() {
    builtin printf "%s\n%s\n%s\n%s\n" \
        "Available arguments:" \
        "    start - Start stopwatch." \
        "    reset - Dump current session data and start new session." \
        "    help  - Print this help page."
}

# Init new session if $current_timer is empty
if [[ ! -s "$current_timer" ]]; then
    init_work_session
fi

# Retrieve current timer
local elapsed
elapsed=$(< "$current_timer" )

# Parse flags
if [[ $1 == "start" ]] || [[ $# == 0 ]]; then
    start_stopwatch
elif [[ $1 == "reset" ]]; then
    dump_session_data
elif [[ $1 == "log" ]]; then
    print_work_hours
elif [[ $1 == "help" ]]; then
    print_help_menu
else
    # Invalid argument
    builtin printf "%s\n\n" "Invalid argument."
    print_help_menu
fi
